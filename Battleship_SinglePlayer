import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Battleship {
    public static void main (String[] args) {
        // Define some characters for display.
        char water = '~';
        char ship = 's';
        char hit = 'X';
        char miss = 'O';

        // Get player input on size of game board.
        int boardLength;
        do {
            System.out.println("Please give a length for the game board size (2 - 9): ");
            boardLength= new Scanner(System.in).nextInt();
        } while (boardLength < 2 || boardLength > 9);

        // Get player input on quantity of ships to destroy.
        int shipNumber;
        int grid = boardLength*boardLength;
        do {
            System.out.print("Please give the number of ships to destroy (1 - " + Integer.parseInt(String.valueOf(grid)) + "): ");
            shipNumber = new Scanner(System.in).nextInt();
        } while (shipNumber < 1 || shipNumber > grid);

        // Create the game board.
        char[][] gameBoard = createGameBoard(boardLength, water, ship, shipNumber);

        // Print the display of the game board.
        Display(gameBoard, water, ship);

        // Game logic.
        // Start with number of undetected ship number = number of ships.
        int hiddenShips = shipNumber;
        while (hiddenShips >= 0) {
            int[] coordinates = userCoordinates(boardLength);
            char displayUpdate = getTarget(coordinates, gameBoard, ship, water, hit, miss);
            if (displayUpdate == hit) {
                hiddenShips--;
                if (hiddenShips == 0) {
                    gameBoard = updateGameBoard(gameBoard, coordinates, displayUpdate);
                    Display(gameBoard, water, ship);
                    System.out.println("You Win! Game Over!");
                    break;
                }
            }
        }
    }

    private static char[][] updateGameBoard(char[][] gameBoard, int[] coordinates, char displayUpdate) {
        int row = coordinates[0];
        int col = coordinates[1];
        gameBoard[row][col] = displayUpdate;
        return gameBoard;
    }

    private static char getTarget(int[] coordinates, char[][] gameBoard, char ship, char water, char hit, char miss) {
        int row = coordinates[0];
        int col = coordinates[1];
        char target = gameBoard[row][col];
        String message;

       if (target== ship) {
            message = "Hit!";
            target = hit;
        } else if (target == water){
            message = "Miss!";
            target = miss;
        } else {
            message = "Already hit.";
        }
        System.out.println(message);
        return target;
    }

    private static int[] userCoordinates(int boardLength) {
        // Get user coordinates.
        int row;
        int col;
        do {
            System.out.print("Enter row number: "); //Get user input as value for row number.
            row = new Scanner(System.in).nextInt();
        } while (row < 1 || row > boardLength + 1);
        do {
            System.out.print("Enter column number: "); //Get user input as value for column number.
            col = new Scanner(System.in).nextInt();
        } while (col < 1 || col >boardLength + 1);
        return new int[]{ row - 1, col - 1}; //Subtract 1 from row and column because we added 1 in Display.
    }

    private static void Display(char[][] gameBoard, char water, char ship) {
        // Generate and print game board display.
        int boardLength = gameBoard.length;
        System.out.print("  "); //First, print 2 space to align the horizontal numbers.
        for (int i = 0; i < boardLength; i++) {
            System.out.print(i + 1 + " "); //For every i, print i plus 1. This creates the horizontal numbers (border).
        }
        System.out.println(); //Print a line after horizontal border.
        for (int row = 0; row <boardLength; row++) {
            System.out.print(row + 1 + " "); //For every row, print row number and space. This creates vertical numbers (border)
            for (int col = 0; col < boardLength; col++) {
                char position = gameBoard[row][col];
                if (position == ship) {
                    System.out.print(water + " "); //Print ~ for every possible ship location and a space.
                } else {
                    System.out.print(position + " "); //Else print space for every position.
                }
            }
            System.out.println(); //Print a line after water character.
        }
        System.out.println(); //Print a line to give display and user input defined space.
    }

    private static char[][] createGameBoard(int boardLength, char water, char ship, int shipNumber) {
        char[][] gameBoard = new char[boardLength][boardLength];
        for (char[] row: gameBoard) {
            Arrays.fill(row, water);
        }
        return placeShips(gameBoard, shipNumber, water, ship);
    }

    private static char[][] placeShips(char[][] gameBoard, int shipNumber, char water, char ship) {
        int placedShips = 0;
        int boardLength = gameBoard.length;
        while (placedShips < shipNumber) {
            int[] location = shipCoordinates(boardLength);
            char possiblePlacement = gameBoard[location[0]][location[1]];
            if (possiblePlacement == water) {
                gameBoard[location[0]][location[1]] = ship;
                placedShips++;
            }
        }
        return gameBoard;
    }

    private static int[] shipCoordinates(int boardLength) {
        // Generate random coordinates for the ships.
        int[] coordinates = new int[2];
        for (int i = 0; i < coordinates.length; i++) {
            coordinates[i] = new Random().nextInt(boardLength);
        }
        return coordinates;
    }
}
